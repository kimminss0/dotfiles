" This must be first; it may reset other options.
set nocompatible

language en_US.UTF-8

" Detect file type, language-dependent indenting.
filetype plugin indent on

" Syntax highlight
syntax enable

" Colorscheme
set termguicolors		" use 24-bit color in the terminal
colorscheme habamax
highlight clear ModeMsg		" override

" Larger capacity on history/undo buffers
set history=1000
set undolevels=1000

" Display numbers
set number
set relativenumber

" Tab and indentations
set smartindent
set expandtab
set shiftwidth=2
set softtabstop=-1

" Esc key less delay
set ttimeout
set ttimeoutlen=50

" Mouse support
set mouse=a

" Better backspacing
set backspace=indent,eol,start

" Command-line completion
set wildmode=list:longest,full

" Highlight search results
set hlsearch

" Reset highlight for search results on redraw
nnoremap <silent> <C-l> :nohlsearch<CR><C-l>

" Netrw appearance
let g:netrw_banner = 0		" disable banner
let g:netrw_liststyle = 3	" list files in tree style

" tmux specifics, see  :help tmux-integration
if !has('gui_running') && &term =~ '^\%(screen\|tmux\)'
  if &term =~ '^\%(screen\|tmux\)' 
    " Better mouse support, see  :help 'ttymouse'
    set ttymouse=sgr

    " Enable true colors, see  :help xterm-true-color
    let &termguicolors = v:true
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

    " Enable bracketed paste mode, see  :help xterm-bracketed-paste
    let &t_BE = "\<Esc>[?2004h"
    let &t_BD = "\<Esc>[?2004l"
    let &t_PS = "\<Esc>[200~"
    let &t_PE = "\<Esc>[201~"

    " Enable focus event tracking, see  :help xterm-focus-event
    let &t_fe = "\<Esc>[?1004h"
    let &t_fd = "\<Esc>[?1004l"
    execute "set <FocusGained>=\<Esc>[I"
    execute "set <FocusLost>=\<Esc>[O"
    
    " Enable modified arrow keys, see  :help arrow_modifiers
    execute "silent! set <xUp>=\<Esc>[@;*A"
    execute "silent! set <xDown>=\<Esc>[@;*B"
    execute "silent! set <xRight>=\<Esc>[@;*C"
    execute "silent! set <xLeft>=\<Esc>[@;*D"
  endif
endif

" Copy text using the ANSI OSC52 sequence if the vim compilation did not
" include clipboard support, e.g. on server environment. 
augroup osc52yank
  autocmd!
  if !has('clipboard')
    autocmd TextYankPost * if len(v:event.regcontents[0]) > 1 || len(v:event.regcontents) > 1 | call system("printf $'\\e]52;c;%s\\a' \"$(cat | base64)\" >> /dev/tty", v:event.regcontents)
  endif
augroup END

" Plugins management using vim-plug
call plug#begin()

call plug#end()
