" This must be first; it may reset other options.
set nocompatible

language en_US.UTF-8

" Detect file type, language-dependent indenting.
filetype plugin indent on

" Syntax highlight
syntax enable

" Colorscheme
set termguicolors		" use 24-bit color in the terminal
set bg=light
highlight clear ModeMsg		" override

" Larger capacity on history/undo buffers
set history=1000
set undolevels=1000

" Case-insensitive searching UNLESS \C or one or more capital letters in the search term
set ignorecase
set smartcase

" Decrease update time
set updatetime=250

" Configure how new splits should be opened
set splitright
set splitbelow

" Add cscope search result to quickfix list
set cscopequickfix=s-,c-,d-,i-,t-,e-,a-

" Show which line your cursor is on
set cursorline

" Minimal number of screen lines to keep above and below the cursor.
set scrolloff=5

" Display numbers
set number
set relativenumber

" Clipboard setup
if (has('clipboard'))
  set clipboard+=unnamed
endif

" Tab and indentations
set smartindent
set expandtab
set shiftwidth=2
set softtabstop=-1

" Esc key less delay
set ttimeout
set ttimeoutlen=50

" Mouse support
set mouse=a

" Better backspacing
set backspace=indent,eol,start

" Command-line completion
set wildmode=list:longest,full

" Highlight search results
set hlsearch

" Reset highlight for search results on redraw
nnoremap <silent> <C-l> :nohlsearch<CR><C-l>

" Netrw appearance
let g:netrw_banner = 0		" disable banner
let g:netrw_liststyle = 3	" list files in tree style

" tmux specifics, see  :help tmux-integration
if !has('gui_running') && &term =~ '^\%(screen\|tmux\)'
  if &term =~ '^\%(screen\|tmux\)' 
    " Better mouse support, see  :help 'ttymouse'
    set ttymouse=sgr

    " Enable true colors, see  :help xterm-true-color
    let &termguicolors = v:true
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

    " Enable bracketed paste mode, see  :help xterm-bracketed-paste
    let &t_BE = "\<Esc>[?2004h"
    let &t_BD = "\<Esc>[?2004l"
    let &t_PS = "\<Esc>[200~"
    let &t_PE = "\<Esc>[201~"

    " Enable focus event tracking, see  :help xterm-focus-event
    let &t_fe = "\<Esc>[?1004h"
    let &t_fd = "\<Esc>[?1004l"
    execute "set <FocusGained>=\<Esc>[I"
    execute "set <FocusLost>=\<Esc>[O"
    
    " Enable modified arrow keys, see  :help arrow_modifiers
    execute "silent! set <xUp>=\<Esc>[@;*A"
    execute "silent! set <xDown>=\<Esc>[@;*B"
    execute "silent! set <xRight>=\<Esc>[@;*C"
    execute "silent! set <xLeft>=\<Esc>[@;*D"
  endif
endif
 
" Config for 'ojroques/vim-oscyank'.
"
" Copy text using the ANSI OSC52 sequence if the vim compilation did not
" include clipboard support, e.g. on server environment. 
if (!has('nvim') && !has('clipboard'))
" if (!has('nvim') && !has('clipboard_working'))
    " In the event that the clipboard isn't working, it's quite likely that
    " the + and * registers will not be distinct from the unnamed register. In
    " this case, a:event.regname will always be '' (empty string). However, it
    " can be the case that `has('clipboard_working')` is false, yet `+` is
    " still distinct, so we want to check them all.
    let s:VimOSCYankPostRegisters = ['', '+', '*']
    function! s:VimOSCYankPostCallback(event)
        if a:event.operator == 'y' && index(s:VimOSCYankPostRegisters, a:event.regname) != -1
            call OSCYankRegister(a:event.regname)
        endif
    endfunction
    augroup VimOSCYankPost
        autocmd!
        autocmd TextYankPost * call s:VimOSCYankPostCallback(v:event)
    augroup END
endif

" Plugins management using vim-plug
call plug#begin()

Plug 'ojroques/vim-oscyank', {'branch': 'main'}
Plug 'morhetz/gruvbox'
Plug 'preservim/tagbar'
Plug 'junegunn/fzf',  { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'dr-kino/cscope-maps'
Plug 'brglng/vim-im-select'

call plug#end()

let g:gruvbox_contrast_light = 'hard'
let g:gruvbox_contrast_dark = 'hard'
colorscheme gruvbox

" Check os and if freebsd, use exctags instead of ctags
if has('unix') && system('uname') =~? 'FreeBSD'
  let g:tagbar_ctags_bin = 'exctags'
endif

" Disable IM switching in the command-line mode
let g:im_select_enable_cmd_line=0
